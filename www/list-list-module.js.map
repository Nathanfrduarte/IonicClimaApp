{"version":3,"sources":["webpack:///./src/app/list/list.module.ts","webpack:///./src/app/list/list.page.html","webpack:///./src/app/list/list.page.scss","webpack:///./src/app/list/list.page.ts","webpack:///./src/app/weather.service.ts"],"names":[],"mappings":"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","file":"list-list-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\n\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { ListPage } from './list.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: ListPage\n      }\n    ])\n  ],\n  declarations: [ListPage]\n})\nexport class ListPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>\\n     Conditions\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"main\\\">\\n  <div class=\\\"details\\\">\\n  <h2><strong>Weather Conditions</strong></h2>\\n  <p>Type the name of the city where you want to check the weather conditions.</p>\\n\\n  <form [formGroup] =\\\"weatherForm\\\" (ngSubmit)=\\\"search(weatherForm.value)\\\">\\n    <ion-input placeholder=\\\"Enter City Name, Ex. Paris\\\" formControlName=\\\"city\\\"></ion-input>\\n\\n    <button class=\\\"checkWeather\\\" type=\\\"submit\\\" [disabled]=\\\"!weatherForm.valid\\\">Submit</button>\\n  </form>\\n  <div class=\\\"weather\\\" *ngIf=\\\"weather\\\">\\n      <div>   \\n          <img [src]=\\\"weather.current.condition.icon\\\" />\\n          <p class=\\\"big\\\">{{weather.current.temp_c}}Â°</p>\\n          <p><strong>{{weather.current.condition.text}}</strong></p> \\n      </div>\\n      <div>\\n          \\n          <p>{{weather.location.name}}, <span>{{weather.location.country}}</span> </p>\\n          <p>{{weather.location.localtime}}</p>\\n      </div>  \\n  </div>\\n</div>\\n\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xpc3QvbGlzdC5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit} from '@angular/core';\nimport { WeatherService } from \"../weather.service\";\nimport {FormGroup, FormControl, Validators } from \"@angular/forms\";\n//ionic storage\nimport { Storage } from \"@ionic/storage\";\n\n@Component({\n  selector: 'app-list',\n  templateUrl: 'list.page.html',\n  styleUrls: ['list.page.scss'],\n})\nexport class ListPage implements OnInit {\n  \n  constructor(private weatherService: WeatherService, private ionicStorage: Storage) {\n  \n  }\n\n  public weatherForm = new FormGroup({\n    city: new FormControl('', Validators.required),\n  });\n  public weather;\n  public city;\n\n  search(formData: FormData){\n    console.log(formData);\n    this.ionicStorage.set(\"city\", formData[\"city\"]);\n    \n    this.weatherService.getWeatherFromApi(formData[\"city\"]).subscribe( weather => {\n      this.weather = weather;\n      console.log(weather);\n    })\n\n  }\n\n\n  getWeather(){\n      this.ionicStorage.get(\"city\").then( city => {\n        if(city === null){\n          this.weatherService.getWeatherFromApi(\"paris\").subscribe( weather => {\n            this.weather = weather;\n            console.log(weather);\n          })\n        }else{\n          this.weatherService.getWeatherFromApi(city).subscribe( weather => {\n            this.weather = weather;\n            console.log(weather);\n          });\n        }\n\n      }).catch(err =>{\n        console.log(err);\n      })\n   \n  }\n\n  ngOnInit() {\n    this.getWeather();\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  constructor(private httpClient: HttpClient) {}\n\n  getWeatherFromApi(city: string){\n    return this.httpClient.get(`https://api.apixu.com/v1/current.json?key=YOUR_APIXU_KEY=${city}`);\n  }\n}\n"],"sourceRoot":""}